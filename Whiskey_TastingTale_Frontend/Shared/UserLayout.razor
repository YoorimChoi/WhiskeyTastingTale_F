@using Whiskey_TastingTale_Backend.Data.Entities

@inherits LayoutComponentBase
@inject UserState UserState
@inject PageState PageState
@inject SelectState SelectState
@inject NavigationManager NavigationManager
@inject SearchViewModel ViewModel
@inject NotificationViewModel NotificationViewModel
@inject CustomMudTheme CustomTheme

<MudThemeProvider Theme="CustomTheme" />
<MudDialogProvider />
<MudPopoverProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudAvatar Square="true" @onclick="HandleHpmeClicked">
            <MudImage Src="images/icon.png"></MudImage>
        </MudAvatar>
        <MudTextField @bind-Value="SelectState.SearchWord" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" OnKeyUp="@HandleKeyPress" FullWidth Style="margin:10px; margin-right:0px" />
        <MudBadge Content="@NotificationViewModel.NotificationNum" Color="Color.Primary" Overlap="true" Dot Origin="Origin.TopRight" Visible="@(NotificationViewModel.isDotVisible())">
            <MudIconButton Icon="@Icons.Material.Filled.Notifications" Color="Color.Secondary" DropShadow Size="Size.Medium" OnClick="@(() => NotificationViewModel.OpenNotificationList())" />
        </MudBadge>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="HandleMyPageClicked" Style="white-space:nowrap;margin-right:5px;margin-left:5px " Size="Size.Small">내 정보</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="HandleLogoutClicked" Style="white-space:nowrap;" Size="Size.Small">로그아웃</MudButton>
    </MudAppBar>

    <MudContainer MaxWidth="MaxWidth.Medium" Style="margin-top:100px;">
        @Body
    </MudContainer>

    <MudDrawer @bind-Open="NotificationViewModel.IsOpen" Width="60%" Anchor="Anchor.End" Elevation="1" Variant="@DrawerVariant.Temporary" OverlayAutoClose="true" >
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">알림</MudText>
        </MudDrawerHeader>
        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceEvenly" > 
            <MudSpacer></MudSpacer>
            <MudButton FullWidth Variant="Variant.Outlined" OnClick="NotificationViewModel.ChangeAllRead" Style="white-space:nowrap;"> 모두 읽음 </MudButton>
            <MudButton FullWidth Variant="Variant.Outlined" Color="Color.Secondary" OnClick="NotificationViewModel.DeleteAll" Style="white-space:nowrap;"> 모두 삭제 </MudButton>
            <MudSpacer></MudSpacer>
        </MudStack>
        
        <MudDivider Style="margin:20px" Light DividerType="DividerType.Middle"></MudDivider>
        <MudGrid>
            @foreach (var notification in NotificationViewModel.Notifications)
            {
                <MudItem xs="12" sm="12" md="12" @onclick="@(()=>HandleItemClick(notification))" Style="margin-left:15px; margin-right:15px;">

                    <MudBadge Color="Color.Primary" Dot Overlap Style="width:100%" Visible="@(!notification.is_read)">
                        <MudCard Style="margin-left:10px; margin-right:10px; cursor: pointer;" >
                            <MudCardContent >
                                <MudStack>
                                        <MudText Typo="Typo.caption"> @notification.created_at</MudText>
                                        <MudText Typo="Typo.body2"> @notification.message </MudText>
                                </MudStack>
                            </MudCardContent>
                        </MudCard>
                    </MudBadge>
                </MudItem>
            }  
        </MudGrid>
        <MudPagination Style="margin-top:20px; margin-left:0px" ShowFirstButton="true" ShowLastButton="true" Count="NotificationViewModel.TotalPage" SelectedChanged="NotificationViewModel.PageChanged" />
    </MudDrawer>
</MudLayout>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await PageState.LoadStateAsync();
            await SelectState.LoadStateAsync();
            await UserState.LoadStateAsync();

            NotificationViewModel.OnStateChange = () => InvokeAsync(StateHasChanged);
            await NotificationViewModel.LoadData();
            await NotificationViewModel.initSignalR();

            StateHasChanged();
        }

        base.OnAfterRender(firstRender);
    }

    private void HandleLoginClicked()
    {
        PageState.PriviousPage = "/" + NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.NavigateTo("/login" );
    }

    private void HandleLogoutClicked()
    {
        UserState.init();
        if (NavigationManager.ToBaseRelativePath(NavigationManager.Uri).Equals("mypage")){
            NavigationManager.NavigateTo("/home" );
        }
    }
    private void HandleMyPageClicked()
    {
        NavigationManager.NavigateTo("/mypage" );
    }
    private void HandleHpmeClicked()
    {
        PageState.init();  
        NavigationManager.NavigateTo("/home" );
    }

    private void HandleKeyPress(KeyboardEventArgs args)
    {

        if (args.Key == "Enter" && SelectState.SearchWord != String.Empty)
        {
            if (NavigationManager.ToBaseRelativePath(NavigationManager.Uri).Equals("search"))
            {
                NavigationManager.NavigateTo("/search", forceLoad: true);
            }
            else
            {
                NavigationManager.NavigateTo("/search");
            }
        }
    }

    private async Task HandleItemClick(Notification notification)
    {
        var nextUrl = await NotificationViewModel.HandleItemClick(notification); 
        if (!string.IsNullOrEmpty(nextUrl)) NavigationManager.NavigateTo(nextUrl);
    }
}