@page "/private_reviews"
@using Whiskey_TastingTale_Backend.API.DTOs
@using Whiskey_TastingTale_Frontend.Components
@using Whiskey_TastingTale_Frontend.Services
@using Whiskey_TastingTale_Frontend.ViewModels
@inject MyPageViewModel ViewModel
@inject PageState PageState
@inject UserState UserState
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject RestApiHelper helper



<MudAppBar>
    <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" @onclick="GoBack"> </MudIconButton>
    <MudSpacer></MudSpacer>
    @{
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="HandleLogoutClicked">logout</MudButton>
    }
</MudAppBar>

<div style="display: flex; justify-content: center; width: 100%;">
    <MudCard Style="margin:20px; min-width:600px; max-width:600px; background-color:lightgrey">
        <MudCardContent>
            <MudStack Row="true" Justify="Justify.FlexStart">
                <MudIcon Icon="@Icons.Material.Filled.Chat" Size="Size.Small"/>
                <MudText Typo="Typo.body2"> <b>내 리뷰</b>  </MudText>
            </MudStack>
            @if (ViewModel.MyReviews.Count != 0)
            {
                <MudStack>
                    <MudGrid Spacing="1" Style="max-width:600px">
                        @foreach (ReviewWhiskeyDTO review in ViewModel.MyReviews)
                        {
                            <MudItem xs="12" sm="12" md="12" @onclick="@(()=>HandleItemClick(review))">
                                <MudCard Style="margin-top:10px" >
                                    <MudStack Spacing="0" Row="true" AlignItems="AlignItems.Start" StretchItems="StretchItems.StartAndEnd">
                                        <MudStack Row="true" Style="margin:20px;margin-right:0px;">
                                            <MudImage Src=@GetFullImageUrl(review.whiskey_img_index) Style="width:100px;"></MudImage>
                                            <MudStack Style="width:max-content">
                                                <MudText Class="text-ellipsis"><b>@review.whiskey_name</b></MudText>
                                                <RatingComponent RatingValue=@review.rating></RatingComponent>
                                                <MudText Class="text-ellipsis"> @review.review_text  </MudText>
                                                <MudText Typo="Typo.body2" Align="Align.End"  Inline="true" > @review.updated_date </MudText>
                                            </MudStack>
                                         </MudStack>
                                        <MudStack AlignItems="AlignItems.End"  StretchItems="StretchItems.End">
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" @onclick="@(()=>HandleDeleteClick(review))"></MudIconButton>
                                        </MudStack>
                                    </MudStack>
                                </MudCard>
                            </MudItem>
                        }
                    </MudGrid>
                    <MudPagination Style="justify-content: center;" ShowFirstButton="true" ShowLastButton="true" Count="ViewModel.ReviewTotalPage" SelectedChanged="ViewModel.ReviewPagesChanged" />
                </MudStack>
            }
        </MudCardContent>
    </MudCard>
</div>



@code {

    private async Task GoBack()
    {
        NavigationManager.NavigateTo("/mypage");
    }
    private void HandleLogoutClicked()
    {
        UserState.init();
        NavigationManager.NavigateTo("/home");
    }

    private string GetFullImageUrl(string imagePath)
    {
        return helper.server_uri + "images/" + imagePath;
    }

    private async void HandleItemClick(ReviewWhiskeyDTO review)
    {
        await ViewModel.ClickedReviewItem(review);
        PageState.PriviousPage = "/private_reviews";
        NavigationManager.NavigateTo("/details");
    }

    private async void HandleDeleteClick(ReviewWhiskeyDTO review)
    {
        var parameters = new DialogParameters<DeleteDialog>
        {
            { x => x.ContentText, "정말로 리뷰를 삭제하시겠습니까?" },
            { x => x.ButtonText, "삭제" },
            { x => x.Color, Color.Error }
        };
        var dialog = await DialogService.ShowAsync<DeleteDialog>("리뷰 삭제", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await ViewModel.ClickedDeleteReview(review);
            StateHasChanged(); 
        }

    }
}
