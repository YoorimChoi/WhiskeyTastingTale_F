@page "/private_reviews"
@using Whiskey_TastingTale_Backend.API.DTOs
@using Whiskey_TastingTale_Frontend.Components
@using Whiskey_TastingTale_Frontend.Services
@using Whiskey_TastingTale_Frontend.ViewModels
@inject MyPageViewModel ViewModel
@inject PageState PageState
@inject UserState UserState
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject RestApiHelper helper



<MudAppBar>
    <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" @onclick="GoBack"> </MudIconButton>
    <MudSpacer></MudSpacer>
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="HandleLogoutClicked">로그아웃</MudButton>
</MudAppBar>

<MudGrid Style="padding:10px" Spacing="2">
    <MudItem xs="12" sm="12" md="12">
        <MudStack Row="true" AlignItems="AlignItems.Center">
            <MudIcon Icon="@Icons.Material.Filled.Chat" Size="Size.Medium"/>
            <MudText Typo="Typo.subtitle1"> <b>내 리뷰 목록</b>  </MudText>
        </MudStack>
    </MudItem>
    <MudItem xs="12" sm="12" md="12">
        @if (ViewModel.MyReviews.Count != 0)
        {
            <MudStack AlignItems="AlignItems.Center" Spacing="2">
                <MudGrid Spacing="1">
                    @foreach (ReviewWhiskeyDTO review in ViewModel.MyReviews)
                    {
                        <MudItem xs="12" sm="6" md="6" @onclick="@(()=>HandleItemClick(review))">
                            <MudCard Style="padding:10px;"> 
                                <MudCardContent>
                                    <MudStack Row>
                                        <MudImage Src=@GetFullImageUrl(review.whiskey_img_index) Style="width:40%;height:auto;object-fit:contain;"></MudImage>
                                        <MudStack Style="width:100%">
                                            <MudStack>
                                                <MudText Typo="Typo.body2"><b>@review.whiskey_name</b></MudText>
                                                <MudText Typo="Typo.caption"> @review.updated_date </MudText>
                                                <RatingComponent RatingValue=@review.rating></RatingComponent>
                                                <MudText Typo="Typo.body2"> @review.review_text  </MudText>
                                            </MudStack>
                                            <MudStack AlignItems="AlignItems.End">
                                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" @onclick="@(()=>HandleDeleteClick(review))"></MudIconButton>
                                            </MudStack>
                                        </MudStack>
                                    </MudStack>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
                <MudPagination ShowFirstButton="true" ShowLastButton="true" Count="ViewModel.ReviewTotalPage" SelectedChanged="ViewModel.ReviewPagesChanged" />
            </MudStack>
        }
    </MudItem>
</MudGrid>



@code {
    

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await PageState.LoadStateAsync();
            await UserState.LoadStateAsync();
        }

        base.OnAfterRender(firstRender);
    }
    private async Task GoBack()
    {
        NavigationManager.NavigateTo("/mypage");
    }
    private void HandleLogoutClicked()
    {
        UserState.init();
        NavigationManager.NavigateTo("/home");
    }

    private string GetFullImageUrl(string imagePath)
    {
        return helper.server_uri + "images/" + imagePath;
    }

    private async void HandleItemClick(ReviewWhiskeyDTO review)
    {
        await ViewModel.ClickedReviewItem(review);
        PageState.PriviousPage = "/private_reviews";
        NavigationManager.NavigateTo("/details");
    }

    private async void HandleDeleteClick(ReviewWhiskeyDTO review)
    {
        var parameters = new DialogParameters<DeleteDialog>
        {
            { x => x.ContentText, "정말로 리뷰를 삭제하시겠습니까?" },
            { x => x.ButtonText, "삭제" },
            { x => x.Color, Color.Error }
        };
        var dialog = await DialogService.ShowAsync<DeleteDialog>("리뷰 삭제", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await ViewModel.ClickedDeleteReview(review);
            StateHasChanged(); 
        }

    }
}
