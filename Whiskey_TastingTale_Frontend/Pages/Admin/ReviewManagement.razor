@page "/review_management"

@using Whiskey_TastingTale_Backend.API.DTOs
@using Whiskey_TastingTale_Frontend.Components
@using Whiskey_TastingTale_Frontend.ViewModels

@inject ReviewManagementViewMdoel ViewModel
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<MudAppBar>
    <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" @onclick="GoBack"> </MudIconButton>
</MudAppBar>

<MudPaper Class="pa-4" Elevation="3" Style="max-width: 600px; margin: auto; margin-top: 50px;">
    <MudStack>
        <MudStack Row="true" Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
            <MudIcon Icon="@Icons.Material.Filled.Chat" Size="Size.Small" />
            <MudText Typo="Typo.body2"> <b>리뷰 관리</b>  </MudText>
        </MudStack>
        <MudDataGrid Style="margin:20px;margin-bottom:0px;" Items="@ViewModel.Reviews" > 
            <ToolBarContent>
                <MudSpacer></MudSpacer>
                <MudSpacer></MudSpacer>
                <MudSelect @bind-Value="ViewModel.SearchOption" Style="max-width:100px; min-width:100px;" Required>
                    <MudSelectItem Value="@(new string("전체"))">전체</MudSelectItem>
                    <MudSelectItem Value="@(new string("닉네임"))">닉네임</MudSelectItem>
                    <MudSelectItem Value="@(new string("위스키명"))">위스키명</MudSelectItem>
                </MudSelect>
                <MudTextField Placeholder="Search" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                              @bind-Value="ViewModel.SearchString" Immediate="true" Class="mt-0" OnKeyUp="ViewModel.HandleChangedSearchString"></MudTextField>
                <MudButton Style="margin-left:10px;" Variant="@Variant.Filled" OnClick="ViewModel.SearchClear"> 초기화 </MudButton>
            </ToolBarContent> 
            <Columns>
                <PropertyColumn Property="x => x.whiskey_name" Title="위스키명" />
                <PropertyColumn Property="x => x.user_nickname" Title="닉네임" HeaderStyle="white-space: nowrap;" />
                <TemplateColumn >
                    <CellTemplate>
                        <MudButton Size="@Size.Small" Variant="@Variant.Outlined" Style="white-space: nowrap;" OnClick="@(()=> HandleShowReviewDetail(context.Item))">세부정보</MudButton>
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn >
                    <CellTemplate>
                        <MudButton Size="@Size.Small" FullWidth="true" Variant="@Variant.Filled" Color="@Color.Secondary" OnClick="@(()=> HandleShowDelete(context.Item))">삭제</MudButton>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
        <MudPagination Style="justify-content: center; margin-bottom:20px" ShowFirstButton="true" ShowLastButton="true" Count="ViewModel.TotalPage" SelectedChanged="ViewModel.PageChanged" />
    </MudStack>
</MudPaper>

@code {
    protected override async Task OnInitializedAsync()
    {
        await ViewModel.LoadData();
        base.OnInitialized();
    }

    private async Task GoBack()
    {
        NavigationManager.NavigateTo("/adminpage");
    }

    private async Task HandleShowReviewDetail(ReviewUserWhiskeyDTO review)
    {
        var parameters = new DialogParameters<ReviewDetailDialog>
        {
            { x => x.Review, review}
        };
        var dialog = await DialogService.ShowAsync<ReviewDetailDialog>("리뷰 조회", parameters);
    }

    private async Task HandleShowDelete(ReviewUserWhiskeyDTO review)
    {
        var parameters = new DialogParameters<DeleteDialog>
        {
            { x => x.ContentText, "정말로 리뷰를 삭제하시겠습니까?" },
            { x => x.ButtonText, "삭제" },
            { x => x.Color, Color.Error }
        };
        var dialog = await DialogService.ShowAsync<DeleteDialog>("리뷰 삭제", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await ViewModel.HandleDeleteReview(review);
            StateHasChanged();
        }
    }
}
