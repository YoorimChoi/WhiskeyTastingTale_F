@page "/reviews"
@using Whiskey_TastingTale_Backend.API.DTOs
@using Whiskey_TastingTale_Backend.Model
@using Whiskey_TastingTale_Frontend.Services
@using Whiskey_TastingTale_Frontend.ViewModels
@using Whiskey_TastingTale_Frontend.Components
@inject DetailsViewModel ViewModel
@inject UserState UserState
@inject PageState PageState

@inject NavigationManager NavigationManager


<MudAppBar>
    <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" @onclick="GoBack"> </MudIconButton>
    <MudSpacer></MudSpacer>
    @{
        if (UserState.Token != null)
        {
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="HandleMyPageClicked"
                       Style="white-space:nowrap;margin-right:5px;margin-left:5px ">내 정보</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="HandleLogoutClicked" Style="white-space:nowrap;">로그아웃</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="HandleLoginClicked" Style="white-space:nowrap;">로그인</MudButton>
        }
    }
</MudAppBar>

<MudStack Justify="Justify.Center">
    <MudCard Style="margin:10px">
        <MudCardContent>
            <MudStack AlignItems="AlignItems.Center">
                <MudImage Src=@GetFullImageUrl(ViewModel.SelectedWhiskey.img_index) Style="width:50%;height:auto;" ObjectFit="ObjectFit.ScaleDown"></MudImage>
            </MudStack>
            <MudStack >
                <MudText Typo="Typo.h5" Style="margin-top:20px" >@ViewModel.SelectedWhiskey.whiskey_name</MudText>
                <MudStack Row="true" AlignItems="AlignItems.Center">
                    <RatingComponent RatingValue=@ViewModel.SelectedWhiskey.rating></RatingComponent>
                    <MudText Typo="Typo.body2"> @Double.Round(ViewModel.SelectedWhiskey.rating,1) 점 / @ViewModel.SelectedWhiskey.review_count 개의 리뷰 </MudText>
                </MudStack>
                <MudStack Row="true">
                    <MudText Typo="Typo.body2"><b>도수</b></MudText>
                    <MudText Typo="Typo.body2">@ViewModel.SelectedWhiskey.alcohol_degree%</MudText>
                </MudStack>
                <MudStack Row="true">
                    <MudText Typo="Typo.body2"><b>제조사</b></MudText>
                    <MudText Typo="Typo.body2">@ViewModel.SelectedWhiskey.maker </MudText>
                </MudStack>
            </MudStack>
        </MudCardContent>
    </MudCard>
    <MudGrid Style="padding:10px;">
        @foreach (ReviewUserDTO review in ViewModel.Reviews)
        {
            <MudItem xs="12" sm="12" md="12">
                <MudCard Style="padding:10px;">
                    <MudCardContent>
                        <MudText Typo="Typo.body2"> "@review.user_nickname" 님이 작성</MudText>
                        <MudText Typo="Typo.overline"> @review.updated_date </MudText>
                        <RatingComponent RatingValue=@review.rating></RatingComponent>
                        <MudText Typo="Typo.body2"> @review.review_text  </MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
    <MudPagination Style="justify-content: center; margin-bottom:100px" ShowFirstButton="true" ShowLastButton="true" Count="ViewModel.TotalPage" SelectedChanged="ViewModel.ReviewPagesChanged" />
</MudStack>

<MudAppBar Bottom="true" Fixed="true" Color="Color.Primary" Elevation="1">
    @if (UserState.Token != null)
    {
        @if (ViewModel.WishCheck != null)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Inherit" Edge="Edge.End" OnClick="ViewModel.changeWishCheck" />
        }
        else
        {
            <MudIconButton Icon="@Icons.Material.Filled.FavoriteBorder" Color="Color.Inherit" Edge="Edge.End" OnClick="ViewModel.changeWishCheck" />
        }
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="AddReview"> 리뷰 작성하기</MudButton>
    }
</MudAppBar>


@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await PageState.LoadStateAsync();
            await UserState.LoadStateAsync();
        }

        base.OnAfterRender(firstRender);
    }
    private async Task GoBack()
    {
        NavigationManager.NavigateTo("/details");
    }
    private string GetFullImageUrl(string imagePath)
    {
        return "https://localhost:7299/images/" + imagePath;
    }

    private void AddReview()
    {
        NavigationManager.NavigateTo("/newreview");
    }
    private void HandleMyPageClicked()
    {
        NavigationManager.NavigateTo("/mypage");
    }

    private void HandleLoginClicked()
    {
        PageState.PriviousPage = "/" + NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.NavigateTo("/login");
    }

    private void HandleLogoutClicked()
    {
        UserState.init();
    }
}
