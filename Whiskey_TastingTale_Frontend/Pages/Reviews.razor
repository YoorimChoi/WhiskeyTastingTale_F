@page "/reviews"
@using Whiskey_TastingTale_Backend.API.DTOs
@using Whiskey_TastingTale_Backend.Model
@using Whiskey_TastingTale_Frontend.ViewModels
@using Whiskey_TastingTale_Frontend.Components
@inject DetailsViewModel ViewModel
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime


<MudAppBar>
    <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" @onclick="GoBack"> </MudIconButton>
    <MudSpacer></MudSpacer>
    <MudButton Variant="Variant.Filled" Color="Color.Secondary">MyPage</MudButton>
</MudAppBar>

<div style="display: flex; justify-content: center; width: 100%;">
<MudCard Style="margin:20px; max-width:600px; min-width:600px">
    <MudCardContent>
        <MudStack Row="true" Justify="Justify.Center">
            <MudStack AlignItems="AlignItems.Center">
                <MudImage Src=@GetFullImageUrl(ViewModel.Selected.img_index) ObjectFit="ObjectFit.ScaleDown"></MudImage>
            </MudStack>
            <MudStack >
                <MudText Typo="Typo.h5" >@ViewModel.Selected.whiskey_name</MudText>
                <MudStack Row="true">
                    <RatingComponent RatingValue=@ViewModel.Selected.rating></RatingComponent>
                    <MudText Typo="Typo.body2"> @Double.Round(ViewModel.Selected.rating,1) 점 / @ViewModel.Selected.review_count 개의 리뷰 </MudText>
                </MudStack>
                <MudStack Row="true">
                    <MudText Typo="Typo.body2"><b>도수</b></MudText>
                    <MudText Typo="Typo.body2">@ViewModel.Selected.alcohol_degree%</MudText>
                </MudStack>
                <MudStack Row="true">
                    <MudText Typo="Typo.body2"><b>제조사</b></MudText>
                    <MudText Typo="Typo.body2">@ViewModel.Selected.maker </MudText>
                </MudStack>
            </MudStack>
        </MudStack>
    </MudCardContent>
</MudCard>
</div>
<div style="display: flex; justify-content: center; width: 100%;">

    <MudGrid Spacing="1" Style="margin-bottom:100px; max-width:600px">
    @if (ViewModel.Reviews.Count != 0)
    {
        @foreach (ReviewUserDTO review in ViewModel.Reviews)
        {
            <MudItem xs="12" sm="12" md="12">
                    <MudCard>
                    <MudCardContent>
                        <MudStack>
                            <MudStack>
                                <MudStack Row="true">
                                    <MudText Typo="Typo.body2"> "@review.user_nickname" 님이 작성</MudText>
                                    <MudText Typo="Typo.overline"> @review.updated_date </MudText>
                                    <MudSpacer></MudSpacer>
                                    <RatingComponent RatingValue=@review.rating></RatingComponent>
                                </MudStack>
                                <MudText Typo="Typo.body2"> @review.review_text  </MudText>
                            </MudStack>
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    }
</MudGrid>
</div>

<MudAppBar Bottom="true" Fixed="true" Color="Color.Primary" Elevation="1">
    <MudIconButton Icon="@Icons.Material.Filled.FavoriteBorder" Color="Color.Inherit" Edge="Edge.End" />
    <MudSpacer />
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="AddReview"> 리뷰 작성하기</MudButton>
</MudAppBar>


@code {
    private async Task GoBack()
    {
        NavigationManager.NavigateTo("/details");
    }
    private string GetFullImageUrl(string imagePath)
    {
        return "https://localhost:7299/images/" + imagePath;
    }

    private void AddReview()
    {
        NavigationManager.NavigateTo("/newreview");
    }
}
